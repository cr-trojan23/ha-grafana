AWSTemplateFormatVersion: "2010-09-09"
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: 10.0.1.0/24
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: 10.0.2.0/24
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  Route:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable
  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable      
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GrafanaContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: GrafanaSecurityGroup
      GroupDescription: Security group for Grafana container
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref LBSecurityGroup
  NetworkInterface1:
    Type: AWS::EC2::NetworkInterface
    Properties:
      GroupSet:
        - !Ref GrafanaContainerSecurityGroup
      SubnetId: !Ref Subnet1
      SourceDestCheck: false
      Description: ECS Fargate Network Interface
  NetworkInterface2:
    Type: AWS::EC2::NetworkInterface
    Properties:
      GroupSet:
        - !Ref GrafanaContainerSecurityGroup
      SubnetId: !Ref Subnet2
      SourceDestCheck: false
      Description: ECS Fargate Network Interface
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ha-grafana-cluster
  GrafanaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: grafana-log-group
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ECSExecutionRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  GrafanaTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: grafana-tasks
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: Grafana-container
          Image: grafana/grafana
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref GrafanaLogGroup
              awslogs-stream-prefix: ecs
      RequiresCompatibilities:
        - FARGATE
  GrafanaService:
    Type: AWS::ECS::Service
    DependsOn: LBListener
    Properties:
      ServiceName: grafana-service
      Cluster: !Ref Cluster
      TaskDefinition: !Ref GrafanaTaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      HealthCheckGracePeriodSeconds: 60
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2
          SecurityGroups:
            - !GetAtt GrafanaContainerSecurityGroup.GroupId
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerName: Grafana-container
          ContainerPort: 3000
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: LBSecurityGroup
      GroupDescription: Security group for load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  LB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: grafana-lb
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups:
        - !GetAtt LBSecurityGroup.GroupId
  LBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      Matcher:
        HttpCode: 200,302
      Name: grafana-target-group
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VPC